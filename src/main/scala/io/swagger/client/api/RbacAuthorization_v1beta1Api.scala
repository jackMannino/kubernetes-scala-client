/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.IoK8sApiRbacV1beta1ClusterRole
import io.swagger.client.model.IoK8sApiRbacV1beta1ClusterRoleBinding
import io.swagger.client.model.IoK8sApiRbacV1beta1ClusterRoleBindingList
import io.swagger.client.model.IoK8sApiRbacV1beta1ClusterRoleList
import io.swagger.client.model.IoK8sApiRbacV1beta1Role
import io.swagger.client.model.IoK8sApiRbacV1beta1RoleBinding
import io.swagger.client.model.IoK8sApiRbacV1beta1RoleBindingList
import io.swagger.client.model.IoK8sApiRbacV1beta1RoleList
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1APIResourceList
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1DeleteOptions
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1Status
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1WatchEvent
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class RbacAuthorization_v1beta1Api(val defBasePath: String = "https://localhost",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * 
   * create a ClusterRole
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1ClusterRole
   */
  def createRbacAuthorizationV1beta1ClusterRole(body: IoK8sApiRbacV1beta1ClusterRole, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1ClusterRole] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->createRbacAuthorizationV1beta1ClusterRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1ClusterRole]).asInstanceOf[IoK8sApiRbacV1beta1ClusterRole])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create a ClusterRoleBinding
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1ClusterRoleBinding
   */
  def createRbacAuthorizationV1beta1ClusterRoleBinding(body: IoK8sApiRbacV1beta1ClusterRoleBinding, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1ClusterRoleBinding] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->createRbacAuthorizationV1beta1ClusterRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1ClusterRoleBinding]).asInstanceOf[IoK8sApiRbacV1beta1ClusterRoleBinding])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create a Role
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1Role
   */
  def createRbacAuthorizationV1beta1NamespacedRole(namespace: String, body: IoK8sApiRbacV1beta1Role, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1Role] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->createRbacAuthorizationV1beta1NamespacedRole")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->createRbacAuthorizationV1beta1NamespacedRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1Role]).asInstanceOf[IoK8sApiRbacV1beta1Role])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create a RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1RoleBinding
   */
  def createRbacAuthorizationV1beta1NamespacedRoleBinding(namespace: String, body: IoK8sApiRbacV1beta1RoleBinding, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1RoleBinding] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->createRbacAuthorizationV1beta1NamespacedRoleBinding")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->createRbacAuthorizationV1beta1NamespacedRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1RoleBinding]).asInstanceOf[IoK8sApiRbacV1beta1RoleBinding])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a ClusterRole
   * @param name name of the ClusterRole 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteRbacAuthorizationV1beta1ClusterRole(name: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1ClusterRole")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1ClusterRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a ClusterRoleBinding
   * @param name name of the ClusterRoleBinding 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteRbacAuthorizationV1beta1ClusterRoleBinding(name: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1ClusterRoleBinding")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1ClusterRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of ClusterRole
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteRbacAuthorizationV1beta1CollectionClusterRole(pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of ClusterRoleBinding
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of Role
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteRbacAuthorizationV1beta1CollectionNamespacedRole(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1CollectionNamespacedRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a Role
   * @param name name of the Role 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteRbacAuthorizationV1beta1NamespacedRole(name: String, namespace: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1NamespacedRole")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1NamespacedRole")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1NamespacedRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a RoleBinding
   * @param name name of the RoleBinding 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteRbacAuthorizationV1beta1NamespacedRoleBinding(name: String, namespace: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1NamespacedRoleBinding")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1NamespacedRoleBinding")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->deleteRbacAuthorizationV1beta1NamespacedRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * get available resources
   * @return IoK8sApimachineryPkgApisMetaV1APIResourceList
   */
  def getRbacAuthorizationV1beta1APIResources(): Option[IoK8sApimachineryPkgApisMetaV1APIResourceList] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json", "application/yaml", "application/vnd.kubernetes.protobuf")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1APIResourceList]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1APIResourceList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind ClusterRole
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiRbacV1beta1ClusterRoleList
   */
  def listRbacAuthorizationV1beta1ClusterRole(pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiRbacV1beta1ClusterRoleList] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1ClusterRoleList]).asInstanceOf[IoK8sApiRbacV1beta1ClusterRoleList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind ClusterRoleBinding
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiRbacV1beta1ClusterRoleBindingList
   */
  def listRbacAuthorizationV1beta1ClusterRoleBinding(pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiRbacV1beta1ClusterRoleBindingList] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1ClusterRoleBindingList]).asInstanceOf[IoK8sApiRbacV1beta1ClusterRoleBindingList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind Role
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiRbacV1beta1RoleList
   */
  def listRbacAuthorizationV1beta1NamespacedRole(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiRbacV1beta1RoleList] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->listRbacAuthorizationV1beta1NamespacedRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1RoleList]).asInstanceOf[IoK8sApiRbacV1beta1RoleList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiRbacV1beta1RoleBindingList
   */
  def listRbacAuthorizationV1beta1NamespacedRoleBinding(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiRbacV1beta1RoleBindingList] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->listRbacAuthorizationV1beta1NamespacedRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1RoleBindingList]).asInstanceOf[IoK8sApiRbacV1beta1RoleBindingList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind RoleBinding
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiRbacV1beta1RoleBindingList
   */
  def listRbacAuthorizationV1beta1RoleBindingForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiRbacV1beta1RoleBindingList] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/rolebindings".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1RoleBindingList]).asInstanceOf[IoK8sApiRbacV1beta1RoleBindingList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind Role
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiRbacV1beta1RoleList
   */
  def listRbacAuthorizationV1beta1RoleForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiRbacV1beta1RoleList] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/roles".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1RoleList]).asInstanceOf[IoK8sApiRbacV1beta1RoleList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified ClusterRole
   * @param name name of the ClusterRole 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1ClusterRole
   */
  def readRbacAuthorizationV1beta1ClusterRole(name: String, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1ClusterRole] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->readRbacAuthorizationV1beta1ClusterRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1ClusterRole]).asInstanceOf[IoK8sApiRbacV1beta1ClusterRole])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified ClusterRoleBinding
   * @param name name of the ClusterRoleBinding 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1ClusterRoleBinding
   */
  def readRbacAuthorizationV1beta1ClusterRoleBinding(name: String, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1ClusterRoleBinding] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->readRbacAuthorizationV1beta1ClusterRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1ClusterRoleBinding]).asInstanceOf[IoK8sApiRbacV1beta1ClusterRoleBinding])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified Role
   * @param name name of the Role 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1Role
   */
  def readRbacAuthorizationV1beta1NamespacedRole(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1Role] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->readRbacAuthorizationV1beta1NamespacedRole")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->readRbacAuthorizationV1beta1NamespacedRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1Role]).asInstanceOf[IoK8sApiRbacV1beta1Role])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified RoleBinding
   * @param name name of the RoleBinding 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1RoleBinding
   */
  def readRbacAuthorizationV1beta1NamespacedRoleBinding(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1RoleBinding] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->readRbacAuthorizationV1beta1NamespacedRoleBinding")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->readRbacAuthorizationV1beta1NamespacedRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1RoleBinding]).asInstanceOf[IoK8sApiRbacV1beta1RoleBinding])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified ClusterRole
   * @param name name of the ClusterRole 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1ClusterRole
   */
  def replaceRbacAuthorizationV1beta1ClusterRole(name: String, body: IoK8sApiRbacV1beta1ClusterRole, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1ClusterRole] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1ClusterRole")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1ClusterRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1ClusterRole]).asInstanceOf[IoK8sApiRbacV1beta1ClusterRole])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified ClusterRoleBinding
   * @param name name of the ClusterRoleBinding 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1ClusterRoleBinding
   */
  def replaceRbacAuthorizationV1beta1ClusterRoleBinding(name: String, body: IoK8sApiRbacV1beta1ClusterRoleBinding, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1ClusterRoleBinding] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1ClusterRoleBinding")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1ClusterRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1ClusterRoleBinding]).asInstanceOf[IoK8sApiRbacV1beta1ClusterRoleBinding])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified Role
   * @param name name of the Role 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1Role
   */
  def replaceRbacAuthorizationV1beta1NamespacedRole(name: String, namespace: String, body: IoK8sApiRbacV1beta1Role, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1Role] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1NamespacedRole")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1NamespacedRole")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1NamespacedRole")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1Role]).asInstanceOf[IoK8sApiRbacV1beta1Role])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified RoleBinding
   * @param name name of the RoleBinding 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiRbacV1beta1RoleBinding
   */
  def replaceRbacAuthorizationV1beta1NamespacedRoleBinding(name: String, namespace: String, body: IoK8sApiRbacV1beta1RoleBinding, pretty: Option[String] = None): Option[IoK8sApiRbacV1beta1RoleBinding] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1NamespacedRoleBinding")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1NamespacedRoleBinding")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling RbacAuthorization_v1beta1Api->replaceRbacAuthorizationV1beta1NamespacedRoleBinding")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiRbacV1beta1RoleBinding]).asInstanceOf[IoK8sApiRbacV1beta1RoleBinding])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind ClusterRole
   * @param name name of the ClusterRole 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1ClusterRole(name: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->watchRbacAuthorizationV1beta1ClusterRole")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind ClusterRoleBinding
   * @param name name of the ClusterRoleBinding 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1ClusterRoleBinding(name: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->watchRbacAuthorizationV1beta1ClusterRoleBinding")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of ClusterRoleBinding
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1ClusterRoleBindingList(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of ClusterRole
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1ClusterRoleList(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind Role
   * @param name name of the Role 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1NamespacedRole(name: String, namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->watchRbacAuthorizationV1beta1NamespacedRole")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->watchRbacAuthorizationV1beta1NamespacedRole")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind RoleBinding
   * @param name name of the RoleBinding 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1NamespacedRoleBinding(name: String, namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling RbacAuthorization_v1beta1Api->watchRbacAuthorizationV1beta1NamespacedRoleBinding")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->watchRbacAuthorizationV1beta1NamespacedRoleBinding")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1NamespacedRoleBindingList(namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->watchRbacAuthorizationV1beta1NamespacedRoleBindingList")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of Role
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1NamespacedRoleList(namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling RbacAuthorization_v1beta1Api->watchRbacAuthorizationV1beta1NamespacedRoleList")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of RoleBinding
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of Role
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchRbacAuthorizationV1beta1RoleListForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/rbac.authorization.k8s.io/v1beta1/watch/roles".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
