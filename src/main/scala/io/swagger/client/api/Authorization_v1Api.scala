/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.IoK8sApiAuthorizationV1LocalSubjectAccessReview
import io.swagger.client.model.IoK8sApiAuthorizationV1SelfSubjectAccessReview
import io.swagger.client.model.IoK8sApiAuthorizationV1SelfSubjectRulesReview
import io.swagger.client.model.IoK8sApiAuthorizationV1SubjectAccessReview
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1APIResourceList
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object Authorization_v1Api {

  /**
   * create a LocalSubjectAccessReview
   * 
   * Expected answers:
   *   code 200 : IoK8sApiAuthorizationV1LocalSubjectAccessReview (OK)
   *   code 201 : IoK8sApiAuthorizationV1LocalSubjectAccessReview (Created)
   *   code 202 : IoK8sApiAuthorizationV1LocalSubjectAccessReview (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body 
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   */
  def createAuthorizationV1NamespacedLocalSubjectAccessReview(namespace: String, body: IoK8sApiAuthorizationV1LocalSubjectAccessReview, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[IoK8sApiAuthorizationV1LocalSubjectAccessReview] =
    ApiRequest[IoK8sApiAuthorizationV1LocalSubjectAccessReview](ApiMethods.POST, "https://localhost", "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews", "*/*")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withPathParam("namespace", namespace)
      .withSuccessResponse[IoK8sApiAuthorizationV1LocalSubjectAccessReview](200)
      .withErrorResponse[IoK8sApiAuthorizationV1LocalSubjectAccessReview](201)
      .withErrorResponse[IoK8sApiAuthorizationV1LocalSubjectAccessReview](202)
      .withErrorResponse[Unit](401)
        /**
   * create a SelfSubjectAccessReview
   * 
   * Expected answers:
   *   code 200 : IoK8sApiAuthorizationV1SelfSubjectAccessReview (OK)
   *   code 201 : IoK8sApiAuthorizationV1SelfSubjectAccessReview (Created)
   *   code 202 : IoK8sApiAuthorizationV1SelfSubjectAccessReview (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param body 
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   */
  def createAuthorizationV1SelfSubjectAccessReview(body: IoK8sApiAuthorizationV1SelfSubjectAccessReview, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[IoK8sApiAuthorizationV1SelfSubjectAccessReview] =
    ApiRequest[IoK8sApiAuthorizationV1SelfSubjectAccessReview](ApiMethods.POST, "https://localhost", "/apis/authorization.k8s.io/v1/selfsubjectaccessreviews", "*/*")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withSuccessResponse[IoK8sApiAuthorizationV1SelfSubjectAccessReview](200)
      .withErrorResponse[IoK8sApiAuthorizationV1SelfSubjectAccessReview](201)
      .withErrorResponse[IoK8sApiAuthorizationV1SelfSubjectAccessReview](202)
      .withErrorResponse[Unit](401)
        /**
   * create a SelfSubjectRulesReview
   * 
   * Expected answers:
   *   code 200 : IoK8sApiAuthorizationV1SelfSubjectRulesReview (OK)
   *   code 201 : IoK8sApiAuthorizationV1SelfSubjectRulesReview (Created)
   *   code 202 : IoK8sApiAuthorizationV1SelfSubjectRulesReview (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param body 
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   */
  def createAuthorizationV1SelfSubjectRulesReview(body: IoK8sApiAuthorizationV1SelfSubjectRulesReview, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[IoK8sApiAuthorizationV1SelfSubjectRulesReview] =
    ApiRequest[IoK8sApiAuthorizationV1SelfSubjectRulesReview](ApiMethods.POST, "https://localhost", "/apis/authorization.k8s.io/v1/selfsubjectrulesreviews", "*/*")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withSuccessResponse[IoK8sApiAuthorizationV1SelfSubjectRulesReview](200)
      .withErrorResponse[IoK8sApiAuthorizationV1SelfSubjectRulesReview](201)
      .withErrorResponse[IoK8sApiAuthorizationV1SelfSubjectRulesReview](202)
      .withErrorResponse[Unit](401)
        /**
   * create a SubjectAccessReview
   * 
   * Expected answers:
   *   code 200 : IoK8sApiAuthorizationV1SubjectAccessReview (OK)
   *   code 201 : IoK8sApiAuthorizationV1SubjectAccessReview (Created)
   *   code 202 : IoK8sApiAuthorizationV1SubjectAccessReview (Accepted)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   * 
   * @param body 
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   */
  def createAuthorizationV1SubjectAccessReview(body: IoK8sApiAuthorizationV1SubjectAccessReview, pretty: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[IoK8sApiAuthorizationV1SubjectAccessReview] =
    ApiRequest[IoK8sApiAuthorizationV1SubjectAccessReview](ApiMethods.POST, "https://localhost", "/apis/authorization.k8s.io/v1/subjectaccessreviews", "*/*")
      .withApiKey(apiKey, "authorization", HEADER)
      .withBody(body)
      .withQueryParam("pretty", pretty)
      .withSuccessResponse[IoK8sApiAuthorizationV1SubjectAccessReview](200)
      .withErrorResponse[IoK8sApiAuthorizationV1SubjectAccessReview](201)
      .withErrorResponse[IoK8sApiAuthorizationV1SubjectAccessReview](202)
      .withErrorResponse[Unit](401)
        /**
   * get available resources
   * 
   * Expected answers:
   *   code 200 : IoK8sApimachineryPkgApisMetaV1APIResourceList (OK)
   *   code 401 :  (Unauthorized)
   * 
   * Available security schemes:
   *   BearerToken (apiKey)
   */
  def getAuthorizationV1APIResources()(implicit apiKey: ApiKeyValue): ApiRequest[IoK8sApimachineryPkgApisMetaV1APIResourceList] =
    ApiRequest[IoK8sApimachineryPkgApisMetaV1APIResourceList](ApiMethods.GET, "https://localhost", "/apis/authorization.k8s.io/v1/", "application/json")
      .withApiKey(apiKey, "authorization", HEADER)
      .withSuccessResponse[IoK8sApimachineryPkgApisMetaV1APIResourceList](200)
      .withErrorResponse[Unit](401)
      

}

