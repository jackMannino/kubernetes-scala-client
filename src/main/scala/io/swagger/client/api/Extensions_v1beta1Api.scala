/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.IoK8sApiExtensionsV1beta1DaemonSet
import io.swagger.client.model.IoK8sApiExtensionsV1beta1DaemonSetList
import io.swagger.client.model.IoK8sApiExtensionsV1beta1Deployment
import io.swagger.client.model.IoK8sApiExtensionsV1beta1DeploymentList
import io.swagger.client.model.IoK8sApiExtensionsV1beta1DeploymentRollback
import io.swagger.client.model.IoK8sApiExtensionsV1beta1Ingress
import io.swagger.client.model.IoK8sApiExtensionsV1beta1IngressList
import io.swagger.client.model.IoK8sApiExtensionsV1beta1NetworkPolicy
import io.swagger.client.model.IoK8sApiExtensionsV1beta1NetworkPolicyList
import io.swagger.client.model.IoK8sApiExtensionsV1beta1PodSecurityPolicy
import io.swagger.client.model.IoK8sApiExtensionsV1beta1PodSecurityPolicyList
import io.swagger.client.model.IoK8sApiExtensionsV1beta1ReplicaSet
import io.swagger.client.model.IoK8sApiExtensionsV1beta1ReplicaSetList
import io.swagger.client.model.IoK8sApiExtensionsV1beta1Scale
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1APIResourceList
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1DeleteOptions
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1Status
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1WatchEvent
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class Extensions_v1beta1Api(val defBasePath: String = "https://localhost",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * 
   * create a DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1DaemonSet
   */
  def createExtensionsV1beta1NamespacedDaemonSet(namespace: String, body: IoK8sApiExtensionsV1beta1DaemonSet, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1DaemonSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedDaemonSet")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedDaemonSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DaemonSet]).asInstanceOf[IoK8sApiExtensionsV1beta1DaemonSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create a Deployment
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Deployment
   */
  def createExtensionsV1beta1NamespacedDeployment(namespace: String, body: IoK8sApiExtensionsV1beta1Deployment, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Deployment] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedDeployment")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedDeployment")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Deployment]).asInstanceOf[IoK8sApiExtensionsV1beta1Deployment])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create rollback of a Deployment
   * @param name name of the DeploymentRollback 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1DeploymentRollback
   */
  def createExtensionsV1beta1NamespacedDeploymentRollback(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1DeploymentRollback, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1DeploymentRollback] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedDeploymentRollback")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedDeploymentRollback")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedDeploymentRollback")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DeploymentRollback]).asInstanceOf[IoK8sApiExtensionsV1beta1DeploymentRollback])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create an Ingress
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Ingress
   */
  def createExtensionsV1beta1NamespacedIngress(namespace: String, body: IoK8sApiExtensionsV1beta1Ingress, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Ingress] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedIngress")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedIngress")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Ingress]).asInstanceOf[IoK8sApiExtensionsV1beta1Ingress])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create a NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1NetworkPolicy
   */
  def createExtensionsV1beta1NamespacedNetworkPolicy(namespace: String, body: IoK8sApiExtensionsV1beta1NetworkPolicy, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1NetworkPolicy] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedNetworkPolicy")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedNetworkPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1NetworkPolicy]).asInstanceOf[IoK8sApiExtensionsV1beta1NetworkPolicy])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create a ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1ReplicaSet
   */
  def createExtensionsV1beta1NamespacedReplicaSet(namespace: String, body: IoK8sApiExtensionsV1beta1ReplicaSet, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1ReplicaSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedReplicaSet")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->createExtensionsV1beta1NamespacedReplicaSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1ReplicaSet]).asInstanceOf[IoK8sApiExtensionsV1beta1ReplicaSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * create a PodSecurityPolicy
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1PodSecurityPolicy
   */
  def createExtensionsV1beta1PodSecurityPolicy(body: IoK8sApiExtensionsV1beta1PodSecurityPolicy, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1PodSecurityPolicy] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/podsecuritypolicies".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->createExtensionsV1beta1PodSecurityPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1PodSecurityPolicy]).asInstanceOf[IoK8sApiExtensionsV1beta1PodSecurityPolicy])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1CollectionNamespacedDaemonSet(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1CollectionNamespacedDaemonSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of Deployment
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1CollectionNamespacedDeployment(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1CollectionNamespacedDeployment")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of Ingress
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1CollectionNamespacedIngress(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1CollectionNamespacedIngress")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1CollectionNamespacedReplicaSet(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1CollectionNamespacedReplicaSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete collection of PodSecurityPolicy
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1CollectionPodSecurityPolicy(pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/podsecuritypolicies".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a DaemonSet
   * @param name name of the DaemonSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1NamespacedDaemonSet(name: String, namespace: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedDaemonSet")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedDaemonSet")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedDaemonSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a Deployment
   * @param name name of the Deployment 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1NamespacedDeployment(name: String, namespace: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedDeployment")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedDeployment")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedDeployment")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete an Ingress
   * @param name name of the Ingress 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1NamespacedIngress(name: String, namespace: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedIngress")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedIngress")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedIngress")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a NetworkPolicy
   * @param name name of the NetworkPolicy 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1NamespacedNetworkPolicy(name: String, namespace: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedNetworkPolicy")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedNetworkPolicy")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedNetworkPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a ReplicaSet
   * @param name name of the ReplicaSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1NamespacedReplicaSet(name: String, namespace: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedReplicaSet")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedReplicaSet")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1NamespacedReplicaSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * delete a PodSecurityPolicy
   * @param name name of the PodSecurityPolicy 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1Status
   */
  def deleteExtensionsV1beta1PodSecurityPolicy(name: String, body: IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: Option[String] = None, gracePeriodSeconds: Option[Integer] = None, orphanDependents: Option[Boolean] = None, propagationPolicy: Option[String] = None): Option[IoK8sApimachineryPkgApisMetaV1Status] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/podsecuritypolicies/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1PodSecurityPolicy")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->deleteExtensionsV1beta1PodSecurityPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    gracePeriodSeconds.map(paramVal => queryParams += "gracePeriodSeconds" -> paramVal.toString)
    orphanDependents.map(paramVal => queryParams += "orphanDependents" -> paramVal.toString)
    propagationPolicy.map(paramVal => queryParams += "propagationPolicy" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1Status]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1Status])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * get available resources
   * @return IoK8sApimachineryPkgApisMetaV1APIResourceList
   */
  def getExtensionsV1beta1APIResources(): Option[IoK8sApimachineryPkgApisMetaV1APIResourceList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json", "application/yaml", "application/vnd.kubernetes.protobuf")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1APIResourceList]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1APIResourceList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind DaemonSet
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1DaemonSetList
   */
  def listExtensionsV1beta1DaemonSetForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1DaemonSetList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/daemonsets".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DaemonSetList]).asInstanceOf[IoK8sApiExtensionsV1beta1DaemonSetList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind Deployment
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1DeploymentList
   */
  def listExtensionsV1beta1DeploymentForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1DeploymentList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/deployments".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DeploymentList]).asInstanceOf[IoK8sApiExtensionsV1beta1DeploymentList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind Ingress
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1IngressList
   */
  def listExtensionsV1beta1IngressForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1IngressList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/ingresses".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1IngressList]).asInstanceOf[IoK8sApiExtensionsV1beta1IngressList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1DaemonSetList
   */
  def listExtensionsV1beta1NamespacedDaemonSet(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1DaemonSetList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->listExtensionsV1beta1NamespacedDaemonSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DaemonSetList]).asInstanceOf[IoK8sApiExtensionsV1beta1DaemonSetList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind Deployment
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1DeploymentList
   */
  def listExtensionsV1beta1NamespacedDeployment(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1DeploymentList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->listExtensionsV1beta1NamespacedDeployment")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DeploymentList]).asInstanceOf[IoK8sApiExtensionsV1beta1DeploymentList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind Ingress
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1IngressList
   */
  def listExtensionsV1beta1NamespacedIngress(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1IngressList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->listExtensionsV1beta1NamespacedIngress")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1IngressList]).asInstanceOf[IoK8sApiExtensionsV1beta1IngressList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1NetworkPolicyList
   */
  def listExtensionsV1beta1NamespacedNetworkPolicy(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1NetworkPolicyList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->listExtensionsV1beta1NamespacedNetworkPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1NetworkPolicyList]).asInstanceOf[IoK8sApiExtensionsV1beta1NetworkPolicyList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1ReplicaSetList
   */
  def listExtensionsV1beta1NamespacedReplicaSet(namespace: String, pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1ReplicaSetList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->listExtensionsV1beta1NamespacedReplicaSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1ReplicaSetList]).asInstanceOf[IoK8sApiExtensionsV1beta1ReplicaSetList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind NetworkPolicy
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1NetworkPolicyList
   */
  def listExtensionsV1beta1NetworkPolicyForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1NetworkPolicyList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/networkpolicies".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1NetworkPolicyList]).asInstanceOf[IoK8sApiExtensionsV1beta1NetworkPolicyList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind PodSecurityPolicy
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1PodSecurityPolicyList
   */
  def listExtensionsV1beta1PodSecurityPolicy(pretty: Option[String] = None, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1PodSecurityPolicyList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/podsecuritypolicies".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1PodSecurityPolicyList]).asInstanceOf[IoK8sApiExtensionsV1beta1PodSecurityPolicyList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * list or watch objects of kind ReplicaSet
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApiExtensionsV1beta1ReplicaSetList
   */
  def listExtensionsV1beta1ReplicaSetForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1ReplicaSetList] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/replicasets".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1ReplicaSetList]).asInstanceOf[IoK8sApiExtensionsV1beta1ReplicaSetList])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified DaemonSet
   * @param name name of the DaemonSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
   * @param export Should this value be exported.  Export strips fields that a user can not specify. (optional)
   * @return IoK8sApiExtensionsV1beta1DaemonSet
   */
  def readExtensionsV1beta1NamespacedDaemonSet(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1DaemonSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDaemonSet")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDaemonSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    exact.map(paramVal => queryParams += "exact" -> paramVal.toString)
    export.map(paramVal => queryParams += "export" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DaemonSet]).asInstanceOf[IoK8sApiExtensionsV1beta1DaemonSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read status of the specified DaemonSet
   * @param name name of the DaemonSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1DaemonSet
   */
  def readExtensionsV1beta1NamespacedDaemonSetStatus(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1DaemonSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDaemonSetStatus")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDaemonSetStatus")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DaemonSet]).asInstanceOf[IoK8sApiExtensionsV1beta1DaemonSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified Deployment
   * @param name name of the Deployment 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
   * @param export Should this value be exported.  Export strips fields that a user can not specify. (optional)
   * @return IoK8sApiExtensionsV1beta1Deployment
   */
  def readExtensionsV1beta1NamespacedDeployment(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1Deployment] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDeployment")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDeployment")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    exact.map(paramVal => queryParams += "exact" -> paramVal.toString)
    export.map(paramVal => queryParams += "export" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Deployment]).asInstanceOf[IoK8sApiExtensionsV1beta1Deployment])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read scale of the specified Deployment
   * @param name name of the Scale 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Scale
   */
  def readExtensionsV1beta1NamespacedDeploymentScale(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Scale] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDeploymentScale")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDeploymentScale")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Scale]).asInstanceOf[IoK8sApiExtensionsV1beta1Scale])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read status of the specified Deployment
   * @param name name of the Deployment 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Deployment
   */
  def readExtensionsV1beta1NamespacedDeploymentStatus(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Deployment] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDeploymentStatus")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedDeploymentStatus")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Deployment]).asInstanceOf[IoK8sApiExtensionsV1beta1Deployment])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified Ingress
   * @param name name of the Ingress 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
   * @param export Should this value be exported.  Export strips fields that a user can not specify. (optional)
   * @return IoK8sApiExtensionsV1beta1Ingress
   */
  def readExtensionsV1beta1NamespacedIngress(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1Ingress] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedIngress")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedIngress")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    exact.map(paramVal => queryParams += "exact" -> paramVal.toString)
    export.map(paramVal => queryParams += "export" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Ingress]).asInstanceOf[IoK8sApiExtensionsV1beta1Ingress])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read status of the specified Ingress
   * @param name name of the Ingress 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Ingress
   */
  def readExtensionsV1beta1NamespacedIngressStatus(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Ingress] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedIngressStatus")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedIngressStatus")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Ingress]).asInstanceOf[IoK8sApiExtensionsV1beta1Ingress])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified NetworkPolicy
   * @param name name of the NetworkPolicy 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
   * @param export Should this value be exported.  Export strips fields that a user can not specify. (optional)
   * @return IoK8sApiExtensionsV1beta1NetworkPolicy
   */
  def readExtensionsV1beta1NamespacedNetworkPolicy(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1NetworkPolicy] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedNetworkPolicy")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedNetworkPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    exact.map(paramVal => queryParams += "exact" -> paramVal.toString)
    export.map(paramVal => queryParams += "export" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1NetworkPolicy]).asInstanceOf[IoK8sApiExtensionsV1beta1NetworkPolicy])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified ReplicaSet
   * @param name name of the ReplicaSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
   * @param export Should this value be exported.  Export strips fields that a user can not specify. (optional)
   * @return IoK8sApiExtensionsV1beta1ReplicaSet
   */
  def readExtensionsV1beta1NamespacedReplicaSet(name: String, namespace: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1ReplicaSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedReplicaSet")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedReplicaSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    exact.map(paramVal => queryParams += "exact" -> paramVal.toString)
    export.map(paramVal => queryParams += "export" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1ReplicaSet]).asInstanceOf[IoK8sApiExtensionsV1beta1ReplicaSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read scale of the specified ReplicaSet
   * @param name name of the Scale 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Scale
   */
  def readExtensionsV1beta1NamespacedReplicaSetScale(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Scale] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedReplicaSetScale")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedReplicaSetScale")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Scale]).asInstanceOf[IoK8sApiExtensionsV1beta1Scale])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read status of the specified ReplicaSet
   * @param name name of the ReplicaSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1ReplicaSet
   */
  def readExtensionsV1beta1NamespacedReplicaSetStatus(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1ReplicaSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedReplicaSetStatus")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedReplicaSetStatus")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1ReplicaSet]).asInstanceOf[IoK8sApiExtensionsV1beta1ReplicaSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read scale of the specified ReplicationControllerDummy
   * @param name name of the Scale 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Scale
   */
  def readExtensionsV1beta1NamespacedReplicationControllerDummyScale(name: String, namespace: String, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Scale] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedReplicationControllerDummyScale")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->readExtensionsV1beta1NamespacedReplicationControllerDummyScale")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Scale]).asInstanceOf[IoK8sApiExtensionsV1beta1Scale])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * read the specified PodSecurityPolicy
   * @param name name of the PodSecurityPolicy 
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
   * @param export Should this value be exported.  Export strips fields that a user can not specify. (optional)
   * @return IoK8sApiExtensionsV1beta1PodSecurityPolicy
   */
  def readExtensionsV1beta1PodSecurityPolicy(name: String, pretty: Option[String] = None, exact: Option[Boolean] = None, export: Option[Boolean] = None): Option[IoK8sApiExtensionsV1beta1PodSecurityPolicy] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/podsecuritypolicies/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->readExtensionsV1beta1PodSecurityPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    exact.map(paramVal => queryParams += "exact" -> paramVal.toString)
    export.map(paramVal => queryParams += "export" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1PodSecurityPolicy]).asInstanceOf[IoK8sApiExtensionsV1beta1PodSecurityPolicy])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified DaemonSet
   * @param name name of the DaemonSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1DaemonSet
   */
  def replaceExtensionsV1beta1NamespacedDaemonSet(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1DaemonSet, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1DaemonSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDaemonSet")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDaemonSet")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDaemonSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DaemonSet]).asInstanceOf[IoK8sApiExtensionsV1beta1DaemonSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace status of the specified DaemonSet
   * @param name name of the DaemonSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1DaemonSet
   */
  def replaceExtensionsV1beta1NamespacedDaemonSetStatus(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1DaemonSet, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1DaemonSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDaemonSetStatus")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDaemonSetStatus")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDaemonSetStatus")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1DaemonSet]).asInstanceOf[IoK8sApiExtensionsV1beta1DaemonSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified Deployment
   * @param name name of the Deployment 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Deployment
   */
  def replaceExtensionsV1beta1NamespacedDeployment(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1Deployment, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Deployment] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeployment")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeployment")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeployment")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Deployment]).asInstanceOf[IoK8sApiExtensionsV1beta1Deployment])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace scale of the specified Deployment
   * @param name name of the Scale 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Scale
   */
  def replaceExtensionsV1beta1NamespacedDeploymentScale(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1Scale, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Scale] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeploymentScale")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeploymentScale")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeploymentScale")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Scale]).asInstanceOf[IoK8sApiExtensionsV1beta1Scale])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace status of the specified Deployment
   * @param name name of the Deployment 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Deployment
   */
  def replaceExtensionsV1beta1NamespacedDeploymentStatus(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1Deployment, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Deployment] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeploymentStatus")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeploymentStatus")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedDeploymentStatus")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Deployment]).asInstanceOf[IoK8sApiExtensionsV1beta1Deployment])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified Ingress
   * @param name name of the Ingress 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Ingress
   */
  def replaceExtensionsV1beta1NamespacedIngress(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1Ingress, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Ingress] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedIngress")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedIngress")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedIngress")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Ingress]).asInstanceOf[IoK8sApiExtensionsV1beta1Ingress])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace status of the specified Ingress
   * @param name name of the Ingress 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Ingress
   */
  def replaceExtensionsV1beta1NamespacedIngressStatus(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1Ingress, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Ingress] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedIngressStatus")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedIngressStatus")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedIngressStatus")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Ingress]).asInstanceOf[IoK8sApiExtensionsV1beta1Ingress])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified NetworkPolicy
   * @param name name of the NetworkPolicy 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1NetworkPolicy
   */
  def replaceExtensionsV1beta1NamespacedNetworkPolicy(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1NetworkPolicy, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1NetworkPolicy] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedNetworkPolicy")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedNetworkPolicy")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedNetworkPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1NetworkPolicy]).asInstanceOf[IoK8sApiExtensionsV1beta1NetworkPolicy])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified ReplicaSet
   * @param name name of the ReplicaSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1ReplicaSet
   */
  def replaceExtensionsV1beta1NamespacedReplicaSet(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1ReplicaSet, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1ReplicaSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSet")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSet")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSet")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1ReplicaSet]).asInstanceOf[IoK8sApiExtensionsV1beta1ReplicaSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace scale of the specified ReplicaSet
   * @param name name of the Scale 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Scale
   */
  def replaceExtensionsV1beta1NamespacedReplicaSetScale(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1Scale, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Scale] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSetScale")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSetScale")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSetScale")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Scale]).asInstanceOf[IoK8sApiExtensionsV1beta1Scale])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace status of the specified ReplicaSet
   * @param name name of the ReplicaSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1ReplicaSet
   */
  def replaceExtensionsV1beta1NamespacedReplicaSetStatus(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1ReplicaSet, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1ReplicaSet] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSetStatus")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSetStatus")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicaSetStatus")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1ReplicaSet]).asInstanceOf[IoK8sApiExtensionsV1beta1ReplicaSet])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace scale of the specified ReplicationControllerDummy
   * @param name name of the Scale 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1Scale
   */
  def replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale(name: String, namespace: String, body: IoK8sApiExtensionsV1beta1Scale, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1Scale] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1Scale]).asInstanceOf[IoK8sApiExtensionsV1beta1Scale])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * replace the specified PodSecurityPolicy
   * @param name name of the PodSecurityPolicy 
   * @param body  
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @return IoK8sApiExtensionsV1beta1PodSecurityPolicy
   */
  def replaceExtensionsV1beta1PodSecurityPolicy(name: String, body: IoK8sApiExtensionsV1beta1PodSecurityPolicy, pretty: Option[String] = None): Option[IoK8sApiExtensionsV1beta1PodSecurityPolicy] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/podsecuritypolicies/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1PodSecurityPolicy")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling Extensions_v1beta1Api->replaceExtensionsV1beta1PodSecurityPolicy")

    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApiExtensionsV1beta1PodSecurityPolicy]).asInstanceOf[IoK8sApiExtensionsV1beta1PodSecurityPolicy])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of DaemonSet
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1DaemonSetListForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/daemonsets".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of Deployment
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1DeploymentListForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/deployments".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of Ingress
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1IngressListForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/ingresses".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind DaemonSet
   * @param name name of the DaemonSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedDaemonSet(name: String, namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedDaemonSet")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedDaemonSet")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedDaemonSetList(namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedDaemonSetList")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind Deployment
   * @param name name of the Deployment 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedDeployment(name: String, namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedDeployment")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedDeployment")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of Deployment
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedDeploymentList(namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedDeploymentList")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind Ingress
   * @param name name of the Ingress 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedIngress(name: String, namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedIngress")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedIngress")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of Ingress
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedIngressList(namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedIngressList")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind NetworkPolicy
   * @param name name of the NetworkPolicy 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedNetworkPolicy(name: String, namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedNetworkPolicy")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedNetworkPolicy")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedNetworkPolicyList(namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedNetworkPolicyList")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind ReplicaSet
   * @param name name of the ReplicaSet 
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedReplicaSet(name: String, namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name)).replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedReplicaSet")

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedReplicaSet")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NamespacedReplicaSetList(namespace: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "namespace" + "\\}",apiInvoker.escape(namespace))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (namespace == null) throw new Exception("Missing required parameter 'namespace' when calling Extensions_v1beta1Api->watchExtensionsV1beta1NamespacedReplicaSetList")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of NetworkPolicy
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1NetworkPolicyListForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/networkpolicies".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch changes to an object of kind PodSecurityPolicy
   * @param name name of the PodSecurityPolicy 
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1PodSecurityPolicy(name: String, continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/podsecuritypolicies/{name}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "name" + "\\}",apiInvoker.escape(name))

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling Extensions_v1beta1Api->watchExtensionsV1beta1PodSecurityPolicy")

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of PodSecurityPolicy
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1PodSecurityPolicyList(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/podsecuritypolicies".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * watch individual changes to a list of ReplicaSet
   * @param continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
   * @param includeUninitialized If true, partially initialized resources are included in the response. (optional)
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)
   * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
   * @param timeoutSeconds Timeout for the list/watch call. (optional)
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
   * @return IoK8sApimachineryPkgApisMetaV1WatchEvent
   */
  def watchExtensionsV1beta1ReplicaSetListForAllNamespaces(continue: Option[String] = None, fieldSelector: Option[String] = None, includeUninitialized: Option[Boolean] = None, labelSelector: Option[String] = None, limit: Option[Integer] = None, pretty: Option[String] = None, resourceVersion: Option[String] = None, timeoutSeconds: Option[Integer] = None, watch: Option[Boolean] = None): Option[IoK8sApimachineryPkgApisMetaV1WatchEvent] = {
    // create path and map variables
    val path = "/apis/extensions/v1beta1/watch/replicasets".replaceAll("\\{format\\}", "json")

    val contentTypes = List("*/*")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    continue.map(paramVal => queryParams += "continue" -> paramVal.toString)
    fieldSelector.map(paramVal => queryParams += "fieldSelector" -> paramVal.toString)
    includeUninitialized.map(paramVal => queryParams += "includeUninitialized" -> paramVal.toString)
    labelSelector.map(paramVal => queryParams += "labelSelector" -> paramVal.toString)
    limit.map(paramVal => queryParams += "limit" -> paramVal.toString)
    pretty.map(paramVal => queryParams += "pretty" -> paramVal.toString)
    resourceVersion.map(paramVal => queryParams += "resourceVersion" -> paramVal.toString)
    timeoutSeconds.map(paramVal => queryParams += "timeoutSeconds" -> paramVal.toString)
    watch.map(paramVal => queryParams += "watch" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IoK8sApimachineryPkgApisMetaV1WatchEvent]).asInstanceOf[IoK8sApimachineryPkgApisMetaV1WatchEvent])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
